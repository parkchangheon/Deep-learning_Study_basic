#신경망 모형- 시그모이드,소프트맥스 함수 구현.

import numpy as np
import sys,os
import pickle
sys.path.append(os.pardir)  #부모디렉터리에서 가져올 수 있도록 설정
from dataset.mnist import load_mnist #데이터 셋mnist.py 에서 load_mnist 함수를 데이터셋으로 데이터셋 읽기

#같은 디렉토리 안에 pkl 파일 넣어줘야 오류가 나지 않음

def sigmoid(x):   # 시그모이드 함수 정의
    return 1/(1+np.exp(x))
 
def softmax(x):   #소프트 맥스 함수 정의
    exp_x=np.exp(x)
    sum_exp=np.sum(exp_x)

def get_data():   
    (x_train,t_train),(x_test,t_test)=\
    load_mnist(normalize=True, flatten=True, one_hot_label=False) #훈련이미지 레이블, 시험이미지 레이블을 1차원 배열로 하고, 이미지 픽셀값은 0~255
    return x_test, t_test

def init_network(): #pickle 파일인 sample_weight.pkl 에 저장된 학습된 가중치 매개변수를 읽는다.
    with open("sample_weight.pkl",'rb')as f:
        network = pickle.load(f)
        
    return network

def predict(network,x): # 3층의 신경망 구조를 표현 한것.- 행렬곱으로 구현=> a= xw+b구조.
    W1,W2,W3=network['W1'],network['W2'],network['W3']
    b1,b2,b3=network['b1'],network['b2'],network['b3']
    
    a1=np.dot(x,W1)+b1
    z1=sigmoid(a1)
    a2=np.dot(z1,W2)+b2
    z2=sigmoid(a2)
    a3=np.dot(z2,W3)+b3
    z3=softmax(a3)
    
    return z3

x,t= get_data()   #mnist 데이터셋을 얻는다
network=init_network() #네트워크를 생성

accuracy_cnt=0
for i in range(len(x)):  #x에 저장된 이미지 데이터를 한장씩 꺼내어 predict로 분류
    y=predict(network,x[i]) #각레이블의 확률을 넘파이 배열로 반환
    p=np.argmax(y)   #위의 배열에서 가장 큰 원서의 인덱스를 구함.
    if p==t[i]:
        accuracy_cnt+=1
        
print("Accuracy:"+str(float(accuracy_cnt)/len(x)))